#!/usr/bin/env bash

function install {
	stepname='installing virtualbox-guest-dkms'
	vbox_guest='virtualbox-guest-dkms'
	
	echo "----------begin ${stepname}----------" | tee --append $logfile

	sudo apt-get update --assume-yes &>> $logfile || earlyexit "${stepname}: update"
	sudo apt-get install $vbox_guest --assume-yes &>> $logfile || earlyexit "${stepname}: install ${vbox_guest}"
	sudo apt-get autoremove --assume-yes &>> $logfile || earlyexit "${stepname}: autoremove"
	sudo apt-get autoclean --assume-yes &>> $logfile || earlyexit "${stepname}: autoclean"

	checklog || earlyexit "${stepname}"
	
	echo "----------${stepname} succeeded----------" | tee --append $logfile
}

function checklog {
#necessary because apt-get may emit a problem to stdout or stderr but still return 0
	problem_count=$(grep --count --extended-regexp '(Err )|(W: )|(E: )' $logfile)
	
	if [[ $problem_count != 0 ]]
	then
		return 1
	else
		return 0
	fi
}

function earlyexit {
	echo "----------a problem occurred during ${1}----------" | tee --append $logfile
	exit 1
}

if [[ $(id --user) != 0 ]]
then
	echo 'You are not running as root. Re-run with sudo.'
	exit 1
fi

# X -version sends to stderr rather than stdout, so |& is necessary to pipe it
current_xserver_version=$(X -version |& grep 'X Server' | grep --only-matching --extended-regexp '([0-9]+(\.)?)+')
supported_xserver_version='1.15.1'

if [[ "${current_xserver_version}" != "${supported_xserver_version}" ]]
then
	echo "Unless you have taken special action, the HOST Ubuntu system is likely running the default Ubuntu repository version of Virtualbox."
	echo "Currently, this version of Virtualbox on the HOST only supports X Server version $supported_xserver_version on GUEST systems."
	echo "This system (the GUEST) has X Server version $current_xserver_version."
	echo "This matters because the script will configure Virtualbox on the GUEST to allow full-screen. This fails due to X Server incompatability."
	echo "Ubuntu 14.04.1 comes with the supported version of X Server; Ubuntu 14.04.2 and later do not."
	echo "Please run this script on a clean Ubuntu 14.04.1 version."
	exit 1
fi

logfile="${HOME}/${0}.log"
sudo rm --force $logfile

preinstall
install

exit 0

